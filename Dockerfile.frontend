# ---------- Build ----------
FROM node:20-alpine AS build
RUN apk add --no-cache libc6-compat

WORKDIR /app
# usa la versión de pnpm del package.json (packageManager)
RUN corepack enable

# 1) Copia archivos base del workspace
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/frontend/package.json ./apps/frontend/package.json
# si el frontend usa libs internas, copia sus package.json también
# COPY libraries/tu-lib/package.json ./libraries/tu-lib/package.json

# 2) Instala sin frozen (para resolver el mismatch del lockfile)
RUN pnpm install --no-frozen-lockfile

# 3) Copia el resto del repo
COPY . .

# 4) Build del frontend
WORKDIR /app/apps/frontend
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm build

# ---------- Runtime ----------
FROM node:20-alpine AS runtime
WORKDIR /app
RUN corepack enable
ENV NODE_ENV=production
ENV PORT=4200
ENV NEXT_TELEMETRY_DISABLED=1
EXPOSE 4200

# Copia artefactos mínimos
COPY --from=build /app/apps/frontend/.next ./apps/frontend/.next
COPY --from=build /app/apps/frontend/public ./apps/frontend/public
COPY --from=build /app/apps/frontend/package.json ./apps/frontend/package.json
COPY --from=build /app/package.json /app/pnpm-workspace.yaml ./

# Instala solo deps prod del frontend
RUN pnpm install --prod --filter ./apps/frontend

WORKDIR /app/apps/frontend
CMD ["pnpm","start","-p","4200"]
