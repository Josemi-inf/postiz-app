# ---------- Build ----------
FROM node:20-alpine AS build
# toolchain para paquetes nativos (sharp, etc.)
RUN apk add --no-cache libc6-compat python3 make g++

WORKDIR /app
# usa la versión de pnpm declarada en package.json (packageManager)
RUN corepack enable

# Copiamos TODO el repo (más simple y a prueba de workspaces)
COPY . .

# Diagnóstico mínimo (opcional)
RUN echo "== ls raíz ==" && ls -la && \
    echo "== pnpm-workspace.yaml ==" && [ -f pnpm-workspace.yaml ] && cat pnpm-workspace.yaml || echo "NO workspace" && \
    echo "== front package.json ==" && cat apps/frontend/package.json

# Instala dependencias del monorepo sin lock estricto (evita mismatch)
RUN pnpm install --no-frozen-lockfile

# Compila el frontend
WORKDIR /app/apps/frontend
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm build

# ---------- Runtime ----------
FROM node:20-alpine AS runtime
RUN apk add --no-cache libc6-compat
WORKDIR /app
RUN corepack enable
ENV NODE_ENV=production
ENV PORT=4200
ENV NEXT_TELEMETRY_DISABLED=1
EXPOSE 4200

# Copiamos solo lo necesario para servir Next
COPY --from=build /app/apps/frontend/.next ./apps/frontend/.next
COPY --from=build /app/apps/frontend/public ./apps/frontend/public
COPY --from=build /app/apps/frontend/package.json ./apps/frontend/package.json
COPY --from=build /app/package.json /app/pnpm-workspace.yaml ./

# Instalar solo deps prod del frontend
RUN pnpm install --prod --filter ./apps/frontend

WORKDIR /app/apps/frontend
CMD ["pnpm","start","-p","4200"]
